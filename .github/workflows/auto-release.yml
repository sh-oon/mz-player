name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-release:
    # PR이 머지되었을 때만 실행
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 태그 생성 및 릴리즈 권한
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # 머지된 main 브랜치 기준으로 작업
          fetch-depth: 0  # 전체 히스토리 가져오기 (태그 비교용)
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install
          yarn --version
          ls -la packages/player/

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(node -p "require('./packages/player/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          # PR 라벨 또는 커밋 메시지로 버전 타입 결정
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          BUMP_TYPE="patch"  # 기본값
          
          # 라벨 기반 버전 결정
          if [[ "$PR_LABELS" == *"major"* ]] || [[ "$PR_TITLE" == *"BREAKING CHANGE"* ]]; then
            BUMP_TYPE="major"
          elif [[ "$PR_LABELS" == *"minor"* ]] || [[ "$PR_LABELS" == *"feature"* ]] || [[ "$PR_TITLE" == *"feat:"* ]] || [[ "$PR_TITLE" == *"feat("* ]]; then
            BUMP_TYPE="minor"
          elif [[ "$PR_LABELS" == *"patch"* ]] || [[ "$PR_TITLE" == *"fix:"* ]] || [[ "$PR_TITLE" == *"fix("* ]]; then
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Bump version
        id: new_version
        run: |
          cd packages/player
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          # 버전 파싱
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # 버전 증가
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # package.json 업데이트
          npm version $NEW_VERSION --no-git-tag-version

      - name: Build player package
        run: |
          cd packages/player
          yarn build

      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add packages/player/package.json
          git commit -m "chore(release): bump version to ${{ steps.new_version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # 이전 태그 찾기
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # 첫 릴리즈인 경우
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # 이전 태그 이후의 커밋들
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # 멀티라인 출력 처리
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            ## 🚀 Release v${{ steps.new_version.outputs.new_version }}
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            ```bash
            npm install @mz-player/player@${{ steps.new_version.outputs.new_version }}
            # or
            yarn add @mz-player/player@${{ steps.new_version.outputs.new_version }}
            ```
          draft: false
          prerelease: false

